// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package another

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// AnotherServiceClient is the client API for AnotherService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnotherServiceClient interface {
	GetHelloWorld(ctx context.Context, in *GetHelloWorldRequest, opts ...grpc.CallOption) (*GetHelloWorldResponse, error)
}

type anotherServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnotherServiceClient(cc grpc.ClientConnInterface) AnotherServiceClient {
	return &anotherServiceClient{cc}
}

func (c *anotherServiceClient) GetHelloWorld(ctx context.Context, in *GetHelloWorldRequest, opts ...grpc.CallOption) (*GetHelloWorldResponse, error) {
	out := new(GetHelloWorldResponse)
	err := c.cc.Invoke(ctx, "/another.AnotherService/GetHelloWorld", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnotherServiceServer is the server API for AnotherService service.
// All implementations must embed UnimplementedAnotherServiceServer
// for forward compatibility
type AnotherServiceServer interface {
	GetHelloWorld(context.Context, *GetHelloWorldRequest) (*GetHelloWorldResponse, error)
	mustEmbedUnimplementedAnotherServiceServer()
}

// UnimplementedAnotherServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAnotherServiceServer struct {
}

func (UnimplementedAnotherServiceServer) GetHelloWorld(context.Context, *GetHelloWorldRequest) (*GetHelloWorldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHelloWorld not implemented")
}
func (UnimplementedAnotherServiceServer) mustEmbedUnimplementedAnotherServiceServer() {}

// UnsafeAnotherServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnotherServiceServer will
// result in compilation errors.
type UnsafeAnotherServiceServer interface {
	mustEmbedUnimplementedAnotherServiceServer()
}

func RegisterAnotherServiceServer(s grpc.ServiceRegistrar, srv AnotherServiceServer) {
	s.RegisterService(&AnotherService_ServiceDesc, srv)
}

func _AnotherService_GetHelloWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHelloWorldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnotherServiceServer).GetHelloWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/another.AnotherService/GetHelloWorld",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnotherServiceServer).GetHelloWorld(ctx, req.(*GetHelloWorldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AnotherService_ServiceDesc is the grpc.ServiceDesc for AnotherService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnotherService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "another.AnotherService",
	HandlerType: (*AnotherServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHelloWorld",
			Handler:    _AnotherService_GetHelloWorld_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/rifqiakrm/go-microservice/proto/another/another.proto",
}
